/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.21.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BillableMetricObject {
    #[serde(rename = "lago_id", skip_serializing_if = "Option::is_none")]
    pub lago_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "field_name", skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    /// Aggregation type
    #[serde(rename = "aggregation_type", skip_serializing_if = "Option::is_none")]
    pub aggregation_type: Option<AggregationType>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<Box<crate::models::BillableMetricGroup>>,
    #[serde(rename = "active_subscriptions_count", skip_serializing_if = "Option::is_none")]
    pub active_subscriptions_count: Option<i32>,
    #[serde(rename = "draft_invoices_count", skip_serializing_if = "Option::is_none")]
    pub draft_invoices_count: Option<i32>,
}

impl BillableMetricObject {
    pub fn new() -> BillableMetricObject {
        BillableMetricObject {
            lago_id: None,
            name: None,
            code: None,
            description: None,
            created_at: None,
            field_name: None,
            aggregation_type: None,
            group: None,
            active_subscriptions_count: None,
            draft_invoices_count: None,
        }
    }
}

/// Aggregation type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AggregationType {
    #[serde(rename = "count_agg")]
    CountAgg,
    #[serde(rename = "sum_agg")]
    SumAgg,
    #[serde(rename = "max_agg")]
    MaxAgg,
    #[serde(rename = "unique_count_agg")]
    UniqueCountAgg,
    #[serde(rename = "recurring_count_agg")]
    RecurringCountAgg,
}

impl Default for AggregationType {
    fn default() -> AggregationType {
        Self::CountAgg
    }
}

