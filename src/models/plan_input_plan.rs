/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.21.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PlanInputPlan {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// Plan interval
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<Interval>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "amount_cents", skip_serializing_if = "Option::is_none")]
    pub amount_cents: Option<i32>,
    #[serde(rename = "amount_currency", skip_serializing_if = "Option::is_none")]
    pub amount_currency: Option<String>,
    #[serde(rename = "trial_period", skip_serializing_if = "Option::is_none")]
    pub trial_period: Option<f32>,
    #[serde(rename = "pay_in_advance", skip_serializing_if = "Option::is_none")]
    pub pay_in_advance: Option<bool>,
    #[serde(rename = "bill_charges_monthly", skip_serializing_if = "Option::is_none")]
    pub bill_charges_monthly: Option<bool>,
    #[serde(rename = "charges", skip_serializing_if = "Option::is_none")]
    pub charges: Option<Vec<crate::models::PlanInputPlanChargesInner>>,
}

impl PlanInputPlan {
    pub fn new() -> PlanInputPlan {
        PlanInputPlan {
            name: None,
            code: None,
            interval: None,
            description: None,
            amount_cents: None,
            amount_currency: None,
            trial_period: None,
            pay_in_advance: None,
            bill_charges_monthly: None,
            charges: None,
        }
    }
}

/// Plan interval
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Interval {
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "yearly")]
    Yearly,
}

impl Default for Interval {
    fn default() -> Interval {
        Self::Weekly
    }
}

