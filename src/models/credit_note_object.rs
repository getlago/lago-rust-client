/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.20.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreditNoteObject {
    #[serde(rename = "lago_id", skip_serializing_if = "Option::is_none")]
    pub lago_id: Option<String>,
    #[serde(rename = "sequential_id", skip_serializing_if = "Option::is_none")]
    pub sequential_id: Option<i32>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    #[serde(rename = "lago_invoice_id", skip_serializing_if = "Option::is_none")]
    pub lago_invoice_id: Option<String>,
    #[serde(rename = "invoice_number", skip_serializing_if = "Option::is_none")]
    pub invoice_number: Option<String>,
    #[serde(rename = "issuing_date", skip_serializing_if = "Option::is_none")]
    pub issuing_date: Option<String>,
    /// Credit status
    #[serde(rename = "credit_status", skip_serializing_if = "Option::is_none")]
    pub credit_status: Option<CreditStatus>,
    /// Refund status
    #[serde(rename = "refund_status", skip_serializing_if = "Option::is_none")]
    pub refund_status: Option<RefundStatus>,
    /// Reason
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "total_amount_cents", skip_serializing_if = "Option::is_none")]
    pub total_amount_cents: Option<i32>,
    #[serde(rename = "total_amount_currency", skip_serializing_if = "Option::is_none")]
    pub total_amount_currency: Option<String>,
    #[serde(rename = "vat_amount_cents", skip_serializing_if = "Option::is_none")]
    pub vat_amount_cents: Option<i32>,
    #[serde(rename = "vat_amount_currency", skip_serializing_if = "Option::is_none")]
    pub vat_amount_currency: Option<String>,
    #[serde(rename = "sub_total_vat_excluded_amount_cents", skip_serializing_if = "Option::is_none")]
    pub sub_total_vat_excluded_amount_cents: Option<i32>,
    #[serde(rename = "sub_total_vat_excluded_amount_currency", skip_serializing_if = "Option::is_none")]
    pub sub_total_vat_excluded_amount_currency: Option<String>,
    #[serde(rename = "balance_amount_cents", skip_serializing_if = "Option::is_none")]
    pub balance_amount_cents: Option<i32>,
    #[serde(rename = "balance_amount_currency", skip_serializing_if = "Option::is_none")]
    pub balance_amount_currency: Option<String>,
    #[serde(rename = "credit_amount_cents", skip_serializing_if = "Option::is_none")]
    pub credit_amount_cents: Option<i32>,
    #[serde(rename = "credit_amount_currency", skip_serializing_if = "Option::is_none")]
    pub credit_amount_currency: Option<String>,
    #[serde(rename = "refund_amount_cents", skip_serializing_if = "Option::is_none")]
    pub refund_amount_cents: Option<i32>,
    #[serde(rename = "refund_amount_currency", skip_serializing_if = "Option::is_none")]
    pub refund_amount_currency: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "file_url", skip_serializing_if = "Option::is_none")]
    pub file_url: Option<String>,
    #[serde(rename = "customer", skip_serializing_if = "Option::is_none")]
    pub customer: Option<Box<crate::models::CustomerObject>>,
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<crate::models::CreditNoteItemObject>>,
}

impl CreditNoteObject {
    pub fn new() -> CreditNoteObject {
        CreditNoteObject {
            lago_id: None,
            sequential_id: None,
            number: None,
            lago_invoice_id: None,
            invoice_number: None,
            issuing_date: None,
            credit_status: None,
            refund_status: None,
            reason: None,
            description: None,
            total_amount_cents: None,
            total_amount_currency: None,
            vat_amount_cents: None,
            vat_amount_currency: None,
            sub_total_vat_excluded_amount_cents: None,
            sub_total_vat_excluded_amount_currency: None,
            balance_amount_cents: None,
            balance_amount_currency: None,
            credit_amount_cents: None,
            credit_amount_currency: None,
            refund_amount_cents: None,
            refund_amount_currency: None,
            created_at: None,
            updated_at: None,
            file_url: None,
            customer: None,
            items: None,
        }
    }
}

/// Credit status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CreditStatus {
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "consumed")]
    Consumed,
    #[serde(rename = "voided")]
    Voided,
}

impl Default for CreditStatus {
    fn default() -> CreditStatus {
        Self::Available
    }
}
/// Refund status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RefundStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for RefundStatus {
    fn default() -> RefundStatus {
        Self::Pending
    }
}
/// Reason
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "duplicated_charge")]
    DuplicatedCharge,
    #[serde(rename = "product_unsatisfactory")]
    ProductUnsatisfactory,
    #[serde(rename = "order_change")]
    OrderChange,
    #[serde(rename = "order_cancellation")]
    OrderCancellation,
    #[serde(rename = "fraudulent_charge")]
    FraudulentCharge,
    #[serde(rename = "other")]
    Other,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::DuplicatedCharge
    }
}

