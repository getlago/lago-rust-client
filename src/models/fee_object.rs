/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FeeObject {
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    #[serde(rename = "lago_group_id", skip_serializing_if = "Option::is_none")]
    pub lago_group_id: Option<uuid::Uuid>,
    #[serde(rename = "lago_invoice_id", skip_serializing_if = "Option::is_none")]
    pub lago_invoice_id: Option<uuid::Uuid>,
    #[serde(rename = "lago_true_up_fee_id", skip_serializing_if = "Option::is_none")]
    pub lago_true_up_fee_id: Option<uuid::Uuid>,
    #[serde(rename = "lago_true_up_parent_fee_id", skip_serializing_if = "Option::is_none")]
    pub lago_true_up_parent_fee_id: Option<uuid::Uuid>,
    #[serde(rename = "external_subscription_id", skip_serializing_if = "Option::is_none")]
    pub external_subscription_id: Option<String>,
    #[serde(rename = "amount_cents")]
    pub amount_cents: i32,
    #[serde(rename = "amount_currency")]
    pub amount_currency: String,
    #[serde(rename = "vat_amount_cents")]
    pub vat_amount_cents: i32,
    #[serde(rename = "vat_amount_currency")]
    pub vat_amount_currency: String,
    #[serde(rename = "units")]
    pub units: f32,
    #[serde(rename = "total_amount_cents", skip_serializing_if = "Option::is_none")]
    pub total_amount_cents: Option<i32>,
    #[serde(rename = "total_amount_currency", skip_serializing_if = "Option::is_none")]
    pub total_amount_currency: Option<String>,
    #[serde(rename = "events_count", skip_serializing_if = "Option::is_none")]
    pub events_count: Option<i32>,
    #[serde(rename = "from_date", skip_serializing_if = "Option::is_none")]
    pub from_date: Option<String>,
    #[serde(rename = "to_date", skip_serializing_if = "Option::is_none")]
    pub to_date: Option<String>,
    #[serde(rename = "payment_status")]
    pub payment_status: PaymentStatus,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "succeeded_at", skip_serializing_if = "Option::is_none")]
    pub succeeded_at: Option<String>,
    #[serde(rename = "failed_at", skip_serializing_if = "Option::is_none")]
    pub failed_at: Option<String>,
    #[serde(rename = "refunded_at", skip_serializing_if = "Option::is_none")]
    pub refunded_at: Option<String>,
    #[serde(rename = "item")]
    pub item: Box<crate::models::FeeObjectItem>,
}

impl FeeObject {
    pub fn new(lago_id: uuid::Uuid, amount_cents: i32, amount_currency: String, vat_amount_cents: i32, vat_amount_currency: String, units: f32, payment_status: PaymentStatus, created_at: String, item: crate::models::FeeObjectItem) -> FeeObject {
        FeeObject {
            lago_id,
            lago_group_id: None,
            lago_invoice_id: None,
            lago_true_up_fee_id: None,
            lago_true_up_parent_fee_id: None,
            external_subscription_id: None,
            amount_cents,
            amount_currency,
            vat_amount_cents,
            vat_amount_currency,
            units,
            total_amount_cents: None,
            total_amount_currency: None,
            events_count: None,
            from_date: None,
            to_date: None,
            payment_status,
            created_at,
            succeeded_at: None,
            failed_at: None,
            refunded_at: None,
            item: Box::new(item),
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "refunded")]
    Refunded,
}

impl Default for PaymentStatus {
    fn default() -> PaymentStatus {
        Self::Pending
    }
}

