/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.20.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreditNoteInputCreditNote {
    #[serde(rename = "invoice_id", skip_serializing_if = "Option::is_none")]
    pub invoice_id: Option<String>,
    /// Reason
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "credit_amount_cents", skip_serializing_if = "Option::is_none")]
    pub credit_amount_cents: Option<i32>,
    #[serde(rename = "refund_amount_cents", skip_serializing_if = "Option::is_none")]
    pub refund_amount_cents: Option<i32>,
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<crate::models::CreditNoteInputCreditNoteItemsInner>>,
}

impl CreditNoteInputCreditNote {
    pub fn new() -> CreditNoteInputCreditNote {
        CreditNoteInputCreditNote {
            invoice_id: None,
            reason: None,
            description: None,
            credit_amount_cents: None,
            refund_amount_cents: None,
            items: None,
        }
    }
}

/// Reason
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "duplicated_charge")]
    DuplicatedCharge,
    #[serde(rename = "product_unsatisfactory")]
    ProductUnsatisfactory,
    #[serde(rename = "order_change")]
    OrderChange,
    #[serde(rename = "order_cancellation")]
    OrderCancellation,
    #[serde(rename = "fraudulent_charge")]
    FraudulentCharge,
    #[serde(rename = "other")]
    Other,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::DuplicatedCharge
    }
}

