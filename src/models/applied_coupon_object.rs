/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.21.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AppliedCouponObject {
    #[serde(rename = "lago_id", skip_serializing_if = "Option::is_none")]
    pub lago_id: Option<String>,
    #[serde(rename = "lago_coupon_id", skip_serializing_if = "Option::is_none")]
    pub lago_coupon_id: Option<String>,
    #[serde(rename = "coupon_code", skip_serializing_if = "Option::is_none")]
    pub coupon_code: Option<String>,
    #[serde(rename = "lago_customer_id", skip_serializing_if = "Option::is_none")]
    pub lago_customer_id: Option<String>,
    #[serde(rename = "external_customer_id", skip_serializing_if = "Option::is_none")]
    pub external_customer_id: Option<String>,
    /// Status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "amount_cents", skip_serializing_if = "Option::is_none")]
    pub amount_cents: Option<i32>,
    #[serde(rename = "amount_cents_remaining", skip_serializing_if = "Option::is_none")]
    pub amount_cents_remaining: Option<i32>,
    #[serde(rename = "amount_currency", skip_serializing_if = "Option::is_none")]
    pub amount_currency: Option<String>,
    #[serde(rename = "percentage_rate", skip_serializing_if = "Option::is_none")]
    pub percentage_rate: Option<f32>,
    /// Frequency type
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Frequency>,
    #[serde(rename = "frequency_duration", skip_serializing_if = "Option::is_none")]
    pub frequency_duration: Option<i32>,
    #[serde(rename = "frequency_duration_remaining", skip_serializing_if = "Option::is_none")]
    pub frequency_duration_remaining: Option<i32>,
    #[serde(rename = "expiration_at", skip_serializing_if = "Option::is_none")]
    pub expiration_at: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "terminated_at", skip_serializing_if = "Option::is_none")]
    pub terminated_at: Option<String>,
}

impl AppliedCouponObject {
    pub fn new() -> AppliedCouponObject {
        AppliedCouponObject {
            lago_id: None,
            lago_coupon_id: None,
            coupon_code: None,
            lago_customer_id: None,
            external_customer_id: None,
            status: None,
            amount_cents: None,
            amount_cents_remaining: None,
            amount_currency: None,
            percentage_rate: None,
            frequency: None,
            frequency_duration: None,
            frequency_duration_remaining: None,
            expiration_at: None,
            created_at: None,
            terminated_at: None,
        }
    }
}

/// Status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "terminated")]
    Terminated,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}
/// Frequency type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Frequency {
    #[serde(rename = "once")]
    Once,
    #[serde(rename = "recurring")]
    Recurring,
}

impl Default for Frequency {
    fn default() -> Frequency {
        Self::Once
    }
}

